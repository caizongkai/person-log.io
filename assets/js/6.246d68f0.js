(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{221:function(s,t,a){s.exports=a.p+"assets/img/01.7e99cffe.png"},222:function(s,t,a){s.exports=a.p+"assets/img/02.5ae5de4e.png"},223:function(s,t,a){s.exports=a.p+"assets/img/03.a656745b.png"},224:function(s,t,a){s.exports=a.p+"assets/img/04.aa7e38e3.png"},225:function(s,t,a){s.exports=a.p+"assets/img/05.d348f680.png"},226:function(s,t,a){s.exports=a.p+"assets/img/zskiplistNode.281767b5.png"},305:function(s,t,a){"use strict";a.r(t);var n=[function(){var s=this,t=s._self._c;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"跳跃表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跳跃表"}},[s._v("#")]),s._v(" 跳跃表")]),s._v(" "),t("p",[s._v("跳跃表是一种有序的数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。这么说，我们可能很难理解，我们可以先回忆一下链表。")]),s._v(" "),t("p",[s._v("对于一个单链表来讲，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历链表。这样查找效率就会很低，时间复杂度会很高，是 O(n)。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(221),alt:"单链表"}})]),s._v(" "),t("p",[s._v("如果我们想要提高其查找效率，可以考虑在链表上建索引的方式。每两个结点提取一个结点到上一级，我们把抽出来的那一级叫作索引。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(222),alt:"一层跳跃表"}})]),s._v(" "),t("p",[s._v("这个时候，我们假设要查找节点8，我们可以先在索引层遍历，当遍历到索引层中值为 7 的结点时，发现下一个节点是9，那么要查找的节点8肯定就在这两个节点之间。我们下降到链表层继续遍历就找到了8这个节点。原先我们在单链表中找到8这个节点要遍历8个节点，而现在有了一级索引后只需要遍历五个节点。")]),s._v(" "),t("p",[s._v("从这个例子里，我们看出，加来一层索引之后，查找一个结点需要遍的结点个数减少了，也就是说查找效率提高了，同理再加一级索引。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(223),alt:"二层跳跃表"}})]),s._v(" "),t("p",[s._v("从图中我们可以看出，查找效率又有提升。在例子中我们的数据很少，当有大量的数据时，我们可以增加多级索引，其查找效率可以得到明显提升。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(224),alt:"跳跃表"}})]),s._v(" "),t("p",[t("strong",[s._v("像这种链表加多级索引的结构，就是跳跃表！")])]),s._v(" "),t("h2",{attrs:{id:"redis跳跃表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis跳跃表"}},[s._v("#")]),s._v(" Redis跳跃表")]),s._v(" "),t("p",[s._v("Redis使用跳跃表作为有序集合键的底层实现之一,如果一个有序集合包含的"),t("strong",[s._v("元素数量比较多")]),s._v(",又或者有序集合中元素的"),t("strong",[s._v("成员是比较长的字符串")]),s._v("时, Redis就会使用跳跃表来作为有序集合健的底层实现。")]),s._v(" "),t("p",[s._v("这里我们需要思考一个问题——为什么元素数量比较多或者成员是比较长的字符串的时候Redis要使用跳跃表来实现？")]),s._v(" "),t("p",[s._v("从上面我们可以知道，跳跃表在链表的基础上增加了多级索引以提升查找的效率，但其是一个空间换时间的方案，必然会带来一个问题——索引是占内存的。原始链表中存储的有可能是很大的对象，而索引结点只需要存储关键值值和几个指针，并不需要存储对象，因此当节点本身比较大或者元素数量比较多的时候，其优势必然会被放大，而缺点则可以忽略。")]),s._v(" "),t("h3",{attrs:{id:"redis跳跃表的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis跳跃表的实现"}},[s._v("#")]),s._v(" Redis跳跃表的实现")]),s._v(" "),t("p",[s._v("Redis的跳跃表由zskiplistNode和skiplist两个结构定义,其中 zskiplistNode结构用于表示跳跃表节点,而 zskiplist结构则用于保存跳跃表节点的相关信息,比如节点的数量,以及指向表头节点和表尾节点的指针等等。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(225),alt:"Redis跳跃表"}})]),s._v(" "),t("p",[s._v("上图展示了一个跳跃表示例,其中最左边的是 "),t("strong",[s._v("skiplist")]),s._v("结构,该结构包含以下属性。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("header:指向跳跃表的表头节点，通过这个指针程序定位表头节点的时间复杂度就为O(1)")])]),s._v(" "),t("li",[t("p",[s._v("tail:指向跳跃表的表尾节点,通过这个指针程序定位表尾节点的时间复杂度就为O(1)")])]),s._v(" "),t("li",[t("p",[s._v("level:记录目前跳跃表内,层数最大的那个节点的层数(表头节点的层数不计算在内)，通过这个属性可以再O(1)的时间复杂度内获取层高最好的节点的层数。")])]),s._v(" "),t("li",[t("p",[s._v("length:记录跳跃表的长度,也即是,跳跃表目前包含节点的数量(表头节点不计算在内)，通过这个属性，程序可以再O(1)的时间复杂度内返回跳跃表的长度。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplist")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表头节点和表尾节点")]),s._v("\n    structz skiplskiistNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表中节点的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表中层数最大的节点的层数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" skiplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("结构右方的是四个 "),t("strong",[s._v("zskiplistNode")]),s._v("结构,该结构包含以下属性")])]),s._v(" "),t("li",[t("p",[s._v("层(level):")]),s._v(" "),t("p",[s._v("节点中用L1、L2、L3等字样标记节点的各个层,L1代表第一层,L2代表第二层,以此类推。")]),s._v(" "),t("p",[s._v("每个层都带有两个属性:前进指针和跨度。前进指针用于访问位于表尾方向的其他节点,而跨度则记录了前进指针所指向节点和当前节点的距离(跨度越大、距离越远)。在上图中,连线上带有数字的箭头就代表前进指针,而那个数字就是跨度。当程序从表头向表尾进行遍历时,访问会沿着层的前进指针进行。")]),s._v(" "),t("p",[s._v("每次创建一个新跳跃表节点的时候,程序都根据幂次定律(powerlaw,越大的数出现的概率越小)随机生成一个介于1和32之间的值作为level数组的大小,这个大小就是层的“高度”。")])]),s._v(" "),t("li",[t("p",[s._v("后退(backward)指针：")]),s._v(" "),t("p",[s._v("节点中用BW字样标记节点的后退指针,它指向位于当前节点的前一个节点。后退指针在程序从表尾向表头遍历时使用。与前进指针所不同的是每个节点只有一个后退指针，因此每次只能后退一个节点。")])]),s._v(" "),t("li",[t("p",[s._v("分值(score):")]),s._v(" "),t("p",[s._v("各个节点中的1.0、2.0和3.0是节点所保存的分值。在跳跃表中,节点按各自所保存的分值从小到大排列。")])]),s._v(" "),t("li",[t("p",[s._v("成员对象(oj):")]),s._v(" "),t("p",[s._v("各个节点中的o1、o2和o3是节点所保存的成员对象。在同一个跳跃表中,各个节点保存的成员对象必须是唯一的,但是多个节点保存的分值却可以是相同的:分值相同的节点将按照成员对象在字典序中的大小来进行排序,成员对象较小的节点会排在前面(靠近表头的方向),而成员对象较大的节点则会排在后面(靠近表尾的方向)。")]),s._v(" "),t("p",[s._v("跳跃表节点实现：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" strct zskiplistNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//后退指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("backward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//分值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//成员对象")]),s._v("\n    robj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//层")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistlevel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//前进指针")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("forward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//跨度")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" span"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zskiplistNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("img",{attrs:{src:a(226),alt:"zskiplistNode"}})]),s._v(" "),t("blockquote",[t("p",[s._v("参考文章：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("《Redis设计与实现》")])]),s._v(" "),t("li",[t("p",[s._v("https://www.cnblogs.com/hunternet/p/11248192.html")])])])])])])}],e=a(0),r=Object(e.a)({},(function(){this._self._c;return this._m(0)}),n,!1,null,null,null);t.default=r.exports}}]);