(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{336:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){this._self._c;return this._m(0)}),[function(){var t=this,a=t._self._c;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"volatile关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile关键字"}},[t._v("#")]),t._v(" Volatile关键字")]),t._v(" "),a("p",[t._v("[TOC]")]),t._v(" "),a("h2",{attrs:{id:"带着面试常见问题学知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#带着面试常见问题学知识"}},[t._v("#")]),t._v(" 带着面试常见问题学知识")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("volatile关键字的作用是什么?")])]),t._v(" "),a("li",[a("p",[t._v("volatile能保证原子性吗?")])]),t._v(" "),a("li",[a("p",[t._v("之前32位机器上共享的long和double变量的为什么要用volatile? 现在64位机器上是否也要设置呢?")])]),t._v(" "),a("li",[a("p",[t._v("i++为什么不能保证原子性?")])]),t._v(" "),a("li",[a("p",[t._v("volatile是如何实现可见性的?  内存屏障。")])]),t._v(" "),a("li",[a("p",[t._v("volatile是如何实现有序性的?  happens-before等")])]),t._v(" "),a("li",[a("p",[t._v("说下volatile的应用场景?")])])]),t._v(" "),a("h2",{attrs:{id:"volatile关键字的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile关键字的作用"}},[t._v("#")]),t._v(" volatile关键字的作用")]),t._v(" "),a("h3",{attrs:{id:"禁止重排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁止重排序"}},[t._v("#")]),t._v(" 禁止重排序")]),t._v(" "),a("p",[t._v("我们从一个最经典的例子来分析重排序问题。大家应该都很熟悉单例模式的实现，而在并发环境下的单例实现方式，我们通常可以采用"),a("strong",[t._v("双重检查加锁")]),t._v("(DCL)的方式来实现。其源码如下：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 构造函数私有，禁止外部实例化\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("构造一个对象的过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("为对象分配空间")]),t._v(" "),a("li",[t._v("初始化对象")]),t._v(" "),a("li",[t._v("将内存空间的地址赋值给引用的对象")])]),t._v(" "),a("p",[t._v("上述的步骤2跟3可能发生重排序，可能会导致对象未实例化就暴露出来，造成严重的后果。volatile关键字可以禁止该重排序。")]),t._v(" "),a("h4",{attrs:{id:"volatile有序性实现的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile有序性实现的原理"}},[t._v("#")]),t._v(" volatile有序性实现的原理")]),t._v(" "),a("h5",{attrs:{id:"volatile-的-happens-before-关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile-的-happens-before-关系"}},[t._v("#")]),t._v(" volatile 的 happens-before 关系")]),t._v(" "),a("p",[t._v("happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。")]),t._v(" "),a("h5",{attrs:{id:"内存屏障"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[t._v("#")]),t._v(" 内存屏障")]),t._v(" "),a("h3",{attrs:{id:"实现可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现可见性"}},[t._v("#")]),t._v(" 实现可见性")]),t._v(" "),a("p",[t._v("因为工作线程在进行写操作的时候会将变量的值先写入缓存，然后在一定的时间后才写入内存中，这就可能导致在一个线程进行写操作后另外一个线程未嗅探到该值的变化，导致可见性问题。volatile可以让线程在执行写操作的时候立刻将值写入到内存中，防止可见性问题。")]),t._v(" "),a("h4",{attrs:{id:"volatile对可见性的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile对可见性的实现原理"}},[t._v("#")]),t._v(" volatile对可见性的实现原理")]),t._v(" "),a("p",[t._v("volatile的可见性的实现是依赖于内存屏障，内存屏障会禁止编译器和处理器对该代码进行重排序，然后将线程的高速缓存区的内容写入到内存中，并通过**缓存一致性协议（MESI）**使其他线程对于该值的引用发生更新。")]),t._v(" "),a("h5",{attrs:{id:"缓存一致性协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性协议"}},[t._v("#")]),t._v(" 缓存一致性协议")]),t._v(" "),a("p",[t._v("既在同一个时间只有一个CPU可以对内存进行读写操作，CPU缓存除了在读写的时候和内存打交道，还会不断嗅探内存的值的变化，当内存的值变化后，CPU缓存会更新自身对该值的引用。")]),t._v(" "),a("h2",{attrs:{id:"volatile只能保证单次读写操作的原子性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile只能保证单次读写操作的原子性"}},[t._v("#")]),t._v(" volatile只能保证单次读写操作的原子性")]),t._v(" "),a("p",[t._v("基于这个原因，我们可以明白两件事：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("i++为什么不能保证原子性：")]),t._v(" "),a("p",[t._v("因为i++操作是两次操作，既读i的值，对i的值进行+1操作。")])]),t._v(" "),a("li",[a("p",[t._v("共享long和double是否需要加volatile：")])])]),t._v(" "),a("p",[t._v("需要，因为long和double分为高32位和低32位，加volatile修饰符可以保证对long和double的单次读写操作具有原子性。")])])}],!1,null,null,null);a.default=e.exports}}]);