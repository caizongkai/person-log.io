(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{346:function(t,r,i){"use strict";i.r(r);var o=i(0),e=Object(o.a)({},(function(){this._self._c;return this._m(0)}),[function(){var t=this,r=t._self._c;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"copyonwritearraylist"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearraylist"}},[t._v("#")]),t._v(" CopyOnWriteArrayList")]),t._v(" "),r("ul",[r("li",[t._v("请先说说非并发集合中Fail-fast机制?")])]),t._v(" "),r("p",[t._v("当在迭代集合的过程中该集合在结构上发生改变的时候，就有可能会发生fail-fast，即抛出 ConcurrentModificationException异常。迭代器在调用next()、remove()方法时都是调用checkForComodification()方法，它检测modCount == expectedModCount ？ 若不等则抛出ConcurrentModificationException 异常，从而产生fail-fast机制。")]),t._v(" "),r("ul",[r("li",[t._v("再为什么说ArrayList查询快而增删慢?")])]),t._v(" "),r("p",[t._v("因为ArrayList的底层是一个数组，对它进行查询的时候，根据索引就能直接找到元素，时间复杂度是O(1)，插入时需要把后面的其他元素往后移动，时间复杂度为O（n）。")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("对比ArrayList说说CopyOnWriteArrayList的增删改查实现原理?")]),t._v(" "),r("p",[t._v("COW基于拷贝。增删改都需要获得锁，并且锁只有一把，而读操作不需要获得锁，支持并发。为什么增删改中都需要创建一个新的数组，操作完成之后再赋给原来的引用？这是为了保证get的时候都能获取到元素，如果在增删改过程直接修改原来的数组，可能会造成执行读操作获取不到数据。")])]),t._v(" "),r("li",[r("p",[t._v("再说下弱一致性的迭代器原理是怎么样的? "),r("code",[t._v("COWIterator<E>")])])])]),t._v(" "),r("p",[t._v("COWIterator表示迭代器，其也有一个Object类型的数组作为CopyOnWriteArrayList数组的快照，这种快照风格的迭代器方法在创建迭代器时使用了对当时数组状态的引用。此数组在迭代器的生存期内不会更改，因此不可能发生冲突，并且迭代器保证不会抛出 ConcurrentModificationException。创建迭代器以后，迭代器就不会反映列表的添加、移除或者更改。在迭代器上进行的元素更改操作(remove、set 和 add)不受支持。这些方法将抛出 UnsupportedOperationException。")]),t._v(" "),r("ul",[r("li",[t._v("CopyOnWriteArrayList为什么并发安全且性能比Vector好?")])]),t._v(" "),r("p",[t._v("我知道Vector是增删改查方法都加了synchronized，保证同步，但是每个方法执行的时候都要去获得锁，性能就会大大下降，而CopyOnWriteArrayList 只是在增删改上加锁，但是读不加锁，在读方面的性能就好于Vector，CopyOnWriteArrayList支持读多写少的并发情况。")]),t._v(" "),r("ul",[r("li",[t._v("CopyOnWriteArrayList有何缺陷，说说其应用场景?\n"),r("ul",[r("li",[t._v("由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致young gc或者full gc")]),t._v(" "),r("li",[t._v("不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个set操作后，读取到数据可能还是旧的,虽然CopyOnWriteArrayList 能做到最终一致性,但是还是没法满足实时性要求；")])])])])])}],!1,null,null,null);r.default=e.exports}}]);