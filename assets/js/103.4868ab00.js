(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{306:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){this._self._c;return this._m(0)}),[function(){var s=this,t=s._self._c;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字典"}},[s._v("#")]),s._v(" 字典")]),s._v(" "),t("p",[s._v("字典又称"),t("strong",[s._v("符号表")]),s._v("，"),t("strong",[s._v("关联数组")]),s._v("或"),t("strong",[s._v("映射")]),s._v("，用于保存键值对的抽象数据结构。当一个哈希键包含的键值对比较多时，或者键值对中的元素都是比较长的字符串时，Redis就会使用字典作为哈希键的底层实现。")]),s._v(" "),t("h2",{attrs:{id:"字典的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字典的实现"}},[s._v("#")]),s._v(" 字典的实现")]),s._v(" "),t("p",[s._v("Redis的字典使用"),t("strong",[s._v("哈希表")]),s._v("作为底层实现，一个哈希表里面可以有"),t("strong",[s._v("多个哈希表节点")]),s._v("，每个哈希表节点保存了字典中的"),t("strong",[s._v("一个键值对")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"哈希表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[s._v("#")]),s._v(" "),t("strong",[s._v("哈希表")])]),s._v(" "),t("p",[s._v("使用"),t("code",[s._v("dict.h/dictht")]),s._v("结构定义：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictht")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表数组")]),s._v("\n    dictEntry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表大小")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表大小掩码，用于计算索引值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//总是等于size-1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sizemask"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//该哈希表已有节点的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" used"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("dictht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("数组中的每个元素都是指向"),t("code",[s._v("dict.h/dictht")]),s._v("的结构，dictEntry就是一个键值对。")]),s._v(" "),t("h3",{attrs:{id:"哈希表节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希表节点"}},[s._v("#")]),s._v(" "),t("strong",[s._v("哈希表节点")])]),s._v(" "),t("p",[s._v("哈希表节点使用dictEntry实现，每个dictEntry都存储着一个键值对：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//键")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("uint64_t")]),s._v(" u64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int64_t")]),s._v(" s64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指向下个哈希表节点，形成链表")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dictEntry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("键值对的值可以是一个指针，或一个"),t("code",[s._v("uint64_t")]),s._v("整数，或一个"),t("code",[s._v("int64_t")]),s._v("整数。next是"),t("strong",[s._v("指向另一个哈希节点的指针")]),s._v("，可将多个"),t("strong",[s._v("哈希值相同的键值对连接在一起")]),s._v("，以此来解决冲突。")]),s._v(" "),t("h3",{attrs:{id:"字典-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字典-2"}},[s._v("#")]),s._v(" "),t("strong",[s._v("字典")])]),s._v(" "),t("p",[s._v("Redis中的字典由"),t("code",[s._v("dict.h/dict")]),s._v("实现，由这个数据结构将字典组织在一起。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dict")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//类型特定函数")]),s._v("\n    dictType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//私有数据")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表")]),s._v("\n    dictht ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//rehash索引")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当rehash不在进行时，值为-1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" rehashidx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("type和privdata属性是"),t("strong",[s._v("针对不同类型")]),s._v("的键值对，为丰富键值对的使用场景而设置的。")]),s._v(" "),t("ul",[t("li",[s._v("type属性是一个指向dictType的结构指针，每个dictType结构保存了一簇用于"),t("strong",[s._v("操作特定类型键值对的函数")]),s._v("，Redis为用途不同的字典设置不同类型特定函数。")])]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//计算哈希值的函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("hashFunction"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//复制键的函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("keyDup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[s._v("privdata属性保存了需要传给那些类型特定函数的可选参数。")]),s._v(" "),t("li",[s._v("ht属性是包含"),t("strong",[s._v("两个项")]),s._v("的数组，每项都是一个哈希表，ht[0]平时使用，而ht[1]仅在rehash时使用。")]),s._v(" "),t("li",[s._v("rehashidx记录了rehash的进度，初始为-1。")])]),s._v(" "),t("h2",{attrs:{id:"哈希算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希算法"}},[s._v("#")]),s._v(" "),t("strong",[s._v("哈希算法")])]),s._v(" "),t("p",[s._v("Redis计算哈希值方法： "),t("code",[s._v("hash=dict->type->hashFunction(key);")]),s._v("\n计算索引值的方法："),t("code",[s._v("index=hash & dict->ht[x].sizemask;")])]),s._v(" "),t("p",[s._v("总结起来就是先计算hash值，再将hash值和哈希表的掩码（哈希表长度-1）的值做与运算，相当于hash值对哈希表的长度取余，也就是hash%ht[x].length。")]),s._v(" "),t("p",[s._v("当字典被用作数据库的底层实现或哈希键的底层实现时，Redis使用"),t("strong",[s._v("MurmurHash2算法")]),s._v("来计算键的哈希值。优点在于即使输入的键是有规律的，算法仍然能给出"),t("strong",[s._v("很好的随机分布性")]),s._v("，并且计算"),t("strong",[s._v("速度飞快")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"哈希冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希冲突"}},[s._v("#")]),s._v(" 哈希冲突")]),s._v(" "),t("p",[s._v("当有两个或以上的键被分配到哈希表的"),t("strong",[s._v("同个索引")]),s._v("，那么就发生了冲突。Redis使用链地址法来解决冲突，被分配到索引的多个节点"),t("strong",[s._v("使用链表连接")]),s._v("。为了提高速度，每次都是将新节点添加到链表的"),t("strong",[s._v("表头")]),s._v("位置。")]),s._v(" "),t("h2",{attrs:{id:"rehash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rehash"}},[s._v("#")]),s._v(" rehash")]),s._v(" "),t("p",[s._v("为了让哈希表的负载因子维持在一个"),t("strong",[s._v("合理的范围内")]),s._v("，当哈希表保存的键值对数量太多或者太少时，程序需要对哈希表的大小进行响应的扩容或缩容。扩容和缩容通过执行rehash来完成，Redis中"),t("strong",[s._v("重新散列的步骤")]),s._v("如下：")]),s._v(" "),t("ol",[t("li",[s._v("为字典ht[1]哈希表"),t("strong",[s._v("分配空间")]),s._v("，大小取决于要执行的操作与ht[0]"),t("strong",[s._v("当前键值对的数量")]),s._v("。")]),s._v(" "),t("li",[s._v("将保存在ht[0]中的所有键值对存放到ht[1]指定的位置")]),s._v(" "),t("li",[s._v("当ht[0]的所有键值对都迁移完毕后，"),t("strong",[s._v("释放ht[0]")]),s._v("，并"),t("strong",[s._v("指向")]),s._v("ht[1]，并在ht[1]上创建一个空的哈希表，为下次rehash准备。")])]),s._v(" "),t("h3",{attrs:{id:"扩容与缩容场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩容与缩容场景"}},[s._v("#")]),s._v(" "),t("strong",[s._v("扩容与缩容场景")])]),s._v(" "),t("p",[s._v("扩容操作场景：")]),s._v(" "),t("p",[s._v("服务器目前没有在执行BGSAVE命令或BGREWRITEAOF命令，并且哈希表的负载因子>=1。\n服务器正在执行BGSAVE命令或BGREWRITEAOF命令，并且哈希表的负载因子>=5。\n负载因子=哈希表已存储节点数/哈希表大小\nload_factor=ht[0].used/ht[0].size")]),s._v(" "),t("p",[s._v("为什么根据BGSAVE命令或BGREWRITEAOF命令来判断是否扩展？\n因为执行这些命令时，Redis需要创建当前服务器进程的子进程，大多数操作系统采用写时复制技术来优化子进程使用效率，此时提高负载因子，可以尽量避免子进程对哈希表扩展，避免不必要的内存写入操作，节约内存。")]),s._v(" "),t("p",[s._v("缩容操作场景：负载因子<0.1时，自动对哈希表执行收缩操作。")]),s._v(" "),t("h3",{attrs:{id:"渐进式rehash的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渐进式rehash的过程"}},[s._v("#")]),s._v(" "),t("strong",[s._v("渐进式rehash的过程")])]),s._v(" "),t("p",[s._v("rehash时会将ht[0]中所有的键值对rehash到ht[1]，如果键值对很多并且一次性操作的话，容易导致服务器在一段时间内停止服务。为避免这种情况，Redis采用渐进式rehash，将ht[0]中的键值对分多次，慢慢的rehash到ht[1]之中。")]),s._v(" "),t("p",[s._v("步骤：")]),s._v(" "),t("p",[s._v("为ht[1]分配空间，让字典同时持有两个哈希表。\n在字典中维持一个索引计数器变量rehashidx，将其设置为0，表示rehash正式开始。\n在rehash进行期间，每次对字典进行添加，删除，查找或更新操作时，程序除了执行指定的操作外，还会将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash工作完成后，将rehashidx++。\n某个时刻，ht[0]中的所有键值对都被rehash至ht[1]，此时设置rehashidx=-1时，表示rehash操作已经完成。")]),s._v(" "),t("p",[s._v("在rehash的期间，字典同时使用ht[0]，ht[1]两个哈希表。对哈希表的操作会在两个表上进行，比如查找键时，先在ht[0]里面查找，如果为空，就继续到ht[1]里查找。在此期间，新增的键值对都会被添加到ht[1]中，ht[0]不承担任何添加操作，保证ht[0]中的键值对只能是越来越少。")])])}],!1,null,null,null);t.default=e.exports}}]);